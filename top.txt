#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure:

    template <typename T>
    class TreeNode {
       public:
        T val;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

vector<int> getTopView(TreeNode<int> *root) {
    // Write your code here.
    // vector<int>ans;
    // if(root==NULL){
    //     return ans;
    // }
    // map<int,int>topnode;
    // //for a leveloreder traversal
    // queue<pair<TreeNode<int>*,int>>q;
    // q.push(make_pair(root,0));

    // while(!q.empty()){
    //     auto temp=q.front();
    //     q.pop();
    //     TreeNode<int>*frontnode=temp.first;
    //     int hd=temp.second;
    //     if(topnode.find(hd)==topnode.end());
    //     {
    //         topnode[hd]=frontnode->val;
    //     }
    //     if(frontnode->left)
    //         //this traversal a function left is exit the push in q
    //         q.push(make_pair(frontnode->left,hd-1));
    //     if(frontnode->right)
    //         q.push(make_pair(frontnode->right,hd+1));

    //     for(auto i: topnode){
    //         ans.push_back(i.second);
    //     }
    //     return ans;


        
    // }
 vector<int>ans;    // To store ans
if(!root)return ans;
map<int,int> TN;       // For mapping with horizontal 

                                       // Difference and da
                                       
queue<pair<TreeNode<int> *,int>> q;    // to check 
q.push({root,0});

while(!q.empty()){
     auto temp = q.front();

       q.pop();

        TreeNode<int> *N = temp.first;

        int hd = temp.second;

         if(TN.find(hd)==TN.end()){

            TN[hd] = N->val;

        }

if(N->left){

          q.push({N->left, hd - 1});

        }

         if(N->right){

           q.push({N->right, hd + 1});

        }

   }

 for(auto i:TN)

   ans.push_back(i.second);

return ans;


}