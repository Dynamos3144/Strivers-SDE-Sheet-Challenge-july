Leval order traversal


#include <bits/stdc++.h> 
/************************************************************

    Following is the BinaryTreeNode class structure

    template <typename T>
    class BinaryTreeNode {
       public:
        T val;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
vector<int> getLevelOrder(BinaryTreeNode<int> *root)
{
    //  Write your code here.
   
    queue<BinaryTreeNode<int>*>q;
    q.push(root);
    vector<int>ans;
     if(root == NULL) return ans ;
    while(!q.empty()){
        BinaryTreeNode<int> *temp=q.front();
        q.pop();
        ans.push_back(temp->val);
        if(temp->left != NULL){
            q.push(temp->left);
        }
        if(temp->right != NULL){
            q.push(temp->right);
        }

       
     }
    return ans;
method 2 advance for leetcode

    // vector<vector<int>>ans;
    //     queue<BinaryTreeNode<int>*>q;
    //     q.push(root);
    //     vector<int>data;

    //     if(root==NULL) return ans;
    //     //when start a infinite loop then use of break
    //     while(1){
    //         int size=q.size();
    //         if(size==0) return ans;
            
    //         vector<int>data;
    //         while(size>0){
    //             BinaryTreeNode<int>*temp=q.front();
    //             q.pop();
    //             data.push_back(temp->val);
    //             if(temp->left != NULL){
    //                 q.push(temp->left);
    //             }
    //     if(temp->right != NULL){
    //         q.push(temp->right);
    //         }    
    //             size--;
    //             }
    //         ans.push_back(data);
            
    //     }
    //     return ans;
    



}